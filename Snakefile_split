import os
import pandas as pd
from scripts.pipeline import *
import json
current = os.getcwd()

ACCESSION = [item for sublist in glob_wildcards("downloads/{accession}.fastq.gz") for item in sublist]
# print("ACCESSION USED:", ACCESSION)


# input_file = fetchall_args_input_file()
# ids = get_ids(f"input/{input_file}")


# if not os.path.exists(f"{current}/downloads"):
#     os.makedirs(f"{current}/downloads")

# files = [f for f in os.listdir(f"{current}/downloads") if f.startswith("SRR")]
# if len(ids.keys()) > len(files):
#     sra_download = fetchall_args_sra_download()
# else:
#     sra_download = "wget"


wildcard_constraints:
    accession = "|".join(ACCESSION)


# Target rule specifying the desired final output
rule all:
    input:
        expand("test_{accession}.txt", accession=ACCESSION)


rule downloadMmul10:
    output:
        ref_report = "downloads/reports/mmul10_assembly_report.txt",
        ref = "downloads/mmul10.fna",
        chr_length = "input/chromosome_lengths.json",
        chr_conversion = "input/chromosome_conversion.json"
    params:
        zipped_ref = "downloads/mmul10.fna.gz"
    shell:
        """
        wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/339/765/GCA_003339765.3_Mmul_10/GCA_003339765.3_Mmul_10_assembly_report.txt -P reports -O {output.ref_report}
        wget https://ftp.ncbi.nlm.nih.gov/genomes/all/GCA/003/339/765/GCA_003339765.3_Mmul_10/GCA_003339765.3_Mmul_10_genomic.fna.gz -O {params.zipped_ref}
        gunzip {params.zipped_ref}
        python -c "from scripts.pipeline import fetch_chromosome; fetch_chromosome()"
        python -c "from scripts.pipeline import cal_chr_length; cal_chr_length()"
        """

# Checkpoint for dynamically splitting the FASTQ file
checkpoint split_fastq:
    input:
        fastq="downloads/{accession}.fastq.gz"
    output:
        directory("split_files/{accession}")        
    conda:
        "envs/seqkit.yaml"
    shell:
        """
        # your shell commands for splitting the file
        mkdir -p {output}

        #run seqkit split2       
        seqkit split2 -s 1000000 -O {output} {input.fastq} 
        """


# Input function to handle output of checkpoint
def getSplitFastqFiles(wildcards):
    checkpoint_output = checkpoints.split_fastq.get(accession=wildcards.accession).output[0]

    parts = glob_wildcards(os.path.join(checkpoint_output, "{accession}.part_{i}.fastq.gz")).i
    
    expanded_paths = expand("QC/raw/{accession}.part_{i}.stats",
                            accession=wildcards.accession,
                            i=parts)
    return expanded_paths


rule rawStats:
    input:
        "split_files/{accession}/{accession}.part_{i}.fastq.gz"
    output:
        "QC/raw/{accession}.part_{i}.stats"
    conda:
        "envs/seqkit.yaml"
    shell:
        """
        seqkit stat {input} > {output}
        """

# Rule for initial QC
rule seqkit:
    input:
        getSplitFastqFiles
    output:
        "results_{accession}.txt",
    shell:
        """
        cat {input} > {output}
        """

# Filter rule for removing adaptor for pacbio reads with seqkit rmdup.
rule pbAdaptFilt:
    input: 
        "split_files/{accession}/{accession}.part_{i}.fastq.gz"
    output: 
        pbfilt = temp("filtered/pb_filtered_{accession}.part_{i}.filt.fastq.gz")
    threads:
        24
    log:
        "logs/adaptor/log_{accession}_pb.part_{i}.log"
    benchmark:
        "benchmarks/adaptfilt/benchmark_{accession}_pb.part_{i}.txt"
    params:
        input_dir = "split_files/{accession}",
        output_dir = "pb_{accession}_{i}",
        filt = "split_files/{accession}/pb_{accession}_{i}/{accession}.part_{i}.filt.fastq.gz" ,
    singularity:
        "docker://australianbiocommons/hifiadapterfilt"
    shell:
        """
        cd {params.input_dir}
        bash pbadapterfilt.sh -o {params.output_dir} -p {wildcards.accession}.part_{wildcards.i} -t {threads}
        cd ../../
        mv {params.filt} {output.pbfilt}
        rm -r {params.input_dir}/{params.output_dir}
        """

rule hifiAdaptFilt:
    input: 
        "filtered/pb_filtered_{accession}.part_{i}.filt.fastq.gz"
    output: 
        filt = temp("filtered/hifi_filtered_{accession}.part_{i}.fastq.gz")
    threads:
        24
    log:
        "logs/adaptor/log_{accession}_hifi.part_{i}.log"
    benchmark:
        "benchmarks/adaptfilt/benchmark_{accession}_hifi.part_{i}.txt"
    params:
        input_dir = "filtered",
        output_dir = "hifi_{accession}_{i}",
        hififilt = "filtered/hifi_{accession}_{i}/pb_filtered_{accession}.part_{i}.filt.filt.fastq.gz",
    singularity:
        "docker://australianbiocommons/hifiadapterfilt"
    shell:
        """
        cd {params.input_dir}
        bash hifiadapterfilt.sh -o {params.output_dir} -p pb_filtered_{wildcards.accession}.part_{wildcards.i} -t {threads}
        cd ../
        mv {params.hififilt} {output.filt} 
        rm -r {params.input_dir}/{params.output_dir}
        """

rule removeDuplicateReads:
    input:
        "filtered/hifi_filtered_{accession}.part_{i}.fastq.gz"
    output:
        "filtered/no_duplicate_{accession}.part_{i}.fastq.gz"
    log:
        "logs/seqkit/duplicates/log_{accession}_duplicates.part_{i}.log"
    conda:
        "envs/seqkit.yaml"
    shell:
        """
        seqkit rmdup {input} -s -i -o {output} 2> {log}
        """


rule filteredReads:
    input:
        "filtered/no_duplicate_{accession}.part_{i}.fastq.gz"
    output:
        "filtered/filtered_{accession}.part_{i}.fastq.gz"
    log:
        "logs/seqkit/filterd/log_{accession}_filterd.part_{i}.log"
    conda:
        "envs/seqkit.yaml"
    shell:
        """
        seqkit seq {input} -m 5000 -o {output} 2> {log}
        """

rule seqkitFiltered:
    input:
        ancient("filtered/filtered_{accession}.part_{i}.fastq.gz")
    output:
        "QC/filtered/filtered_{accession}.part_{i}.stats"
    conda:
        "envs/seqkit.yaml"
    shell:
        """
        seqkit stats {input} -a -o {output}
        """

def getProcessedStatsFiles(wildcards):
    checkpoint_output = checkpoints.split_fastq.get(accession=wildcards.accession).output[0]
    parts = glob_wildcards(f"{checkpoint_output}/{{accession}}.part_{{i}}.fastq.gz").i
    expanded_paths = expand("QC/filtered/filtered_{accession}.part_{i}.stats",
                            accession=wildcards.accession,
                            i=parts)
    print(expanded_paths)
    return expanded_paths


rule processedStats:
    input:
        getProcessedStatsFiles
    output:
        "processed_{accession}.txt"
    shell:
        """
        cat {input} > {output}
        """


rule minimap2:
    input:
        read = "filtered/filtered_{accession}.part_{i}.fastq.gz",
        mmul10 = ancient("downloads/mmul10.fna"),
    output:
        "alignments/{accession}.part_{i}.sam"
    log:
        "logs/minimap2/log_{accession}_alignment.part_{i}.log"
    benchmark:
        "benchmarks/minimap2/benchmark_{accession}_alignment.part_{i}.txt"
    threads: 
        24
    params:
        read_type = "map-pb"
    conda:
        "envs/minimap2.yaml"
    shell:
        """
        minimap2 -ax {params.read_type} -t {threads} {input.mmul10} {input.read} > {output} 2> {log}
        """

rule extractMappedReads:
    input:
        "alignments/{accession}.part_{i}.sam"
    output:
        "alignments/extracted_{accession}.part_{i}.bam",
    log:
        "logs/samtools/log_{accession}_alignment.part_{i}.log",
    conda:
        "envs/samtools.yaml"
    threads:
        10
    shell:
        """
        samtools view -@ {threads} -b -F4 {input} > {output} 2> {log}
        """

rule sortIndexBam:
    input:
        "alignments/extracted_{accession}.part_{i}.bam"
    output:
        sorted_bam = "alignments/sorted_{accession}.part_{i}.bam",
        index_bam = "alignments/sorted_{accession}.part_{i}.bam.bai",
    log:
        "logs/samtools/sort_index_log_{accession}.part_{i}.log"
    conda:
        "envs/samtools.yaml"
    threads:
        10
    shell:
        """
        samtools sort -@ {threads} -o {output.sorted_bam} {input}
        samtools index -@ {threads} {output.sorted_bam} {output.index_bam} 2> {log}
        """


### test rule ###


# Input function to handle output of checkpoint
def intermediate_file(wildcards):
    checkpoint_output = checkpoints.split_fastq.get(accession=wildcards.accession).output[0]
    parts = glob_wildcards(os.path.join(checkpoint_output, "{accession}.part_{i}.fastq.gz")).i
    expanded_paths = expand("alignments/sorted_{accession}.part_{i}.bam",
                            accession=wildcards.accession,
                            i=parts)
    return expanded_paths


# Rule to utilize the split FASTQ files
rule use_split_files:
    input:
        intermediate_file
    output:
        "test_{accession}.txt"
    shell:
        """
        echo {input} | tr ' ' '\n' > {output}
        """

